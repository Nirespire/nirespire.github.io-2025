import { test, expect } from '@playwright/test';

test.describe('Blog posts', () => {
  test('should render blog post with banner image', async ({ page }) => {
    // Navigate to a post we know has a banner image
    await page.goto('/blog/2025-07-10-genai-for-leaders/');
    
    // Verify banner image
    const banner = page.locator('div.relative img[itemprop="image"]');
    await expect(banner).toBeVisible();
    await expect(banner).toHaveAttribute('src', '/assets/images/genai-for-leaders.png');
    await expect(banner).toHaveAttribute('alt', 'Generated by Gemini 2.5-flash');
    
    // Verify banner image layout
    await expect(banner).toHaveCSS('object-fit', 'cover');
    await expect(page.locator('div.relative.w-full.h-48')).toHaveCSS('overflow', 'hidden');
  });

  test('should render blog post without banner image correctly', async ({ page }) => {
    // Navigate to the sample post (assuming it doesn't have a banner)
    await page.goto('/blog/2025-06-23-minecraft-devops/');
    
    // Verify no banner image is present
    const banner = page.locator('.h-48.md\\:h-64');
    await expect(banner).not.toBeVisible();
    
    // Verify post content still renders correctly
    const article = page.locator('article');
    await expect(article).toBeVisible();
    await expect(article.getByRole('heading', { level: 1 })).toBeVisible();
  });

  test('should display post metadata', async ({ page }) => {
    await page.goto('/blog/2025-07-10-genai-for-leaders/');
    
    // Check title and subtitle
    await expect(page.getByRole('heading', { level: 1 })).toContainText('GenAI Augmentation for Technology Leaders');
    await expect(page.locator('p.text-gray-400.text-xl')).toContainText("There's more to it than just the coding agents");
    
    // Check date and reading time
    const metadata = page.locator('time');
    await expect(metadata).toContainText('July 10, 2025');
    
    // Check reading time
    const readingTime = page.locator('span[itemprop="timeRequired"]');
    await expect(readingTime).toContainText('min read');
    
    // Check tags
    const tags = page.locator('a[itemprop="keywords"]');
    await expect(tags).toHaveCount(5); // This post has 5 tags
    await expect(tags).toContainText(['leadership', 'gen-ai', 'software engineering', 'ai', 'career']);
  });

  test('should have working navigation between posts', async ({ page }) => {
    await page.goto('/blog/2025-07-10-genai-for-leaders/');
    
    // Check navigation elements
    const nav = page.locator('nav');
    await expect(nav.getByText('Back to Blog')).toBeVisible();
    
    // Click back to blog
    await nav.getByText('Back to Blog').click();
    await expect(page).toHaveURL('/blog/');
  });

  test('should have properly configured comments section', async ({ page }) => {
    await page.goto('/blog/2025-07-10-genai-for-leaders/');
    
    // Check giscus script is present with correct configuration
    const giscusScript = page.locator('script[src="https://giscus.app/client.js"]');
    await expect(giscusScript).toBeAttached();
    
    // Verify essential giscus configuration
    await expect(giscusScript).toHaveAttribute('data-repo', 'Nirespire/nirespire.github.io-2025');
    await expect(giscusScript).toHaveAttribute('data-mapping', 'title');
    await expect(giscusScript).toHaveAttribute('data-theme', 'preferred_color_scheme');
    await expect(giscusScript).toHaveAttribute('data-lang', 'en');
    
    // Check giscus container is present
    const giscusContainer = page.locator('div.giscus');
    await expect(giscusContainer).toBeVisible();
    await expect(giscusContainer).toHaveClass(/mt-8/);
  });
});
